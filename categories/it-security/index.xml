<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>It Security on Pointers to the void</title>
    <link>https://schlafwandler.github.io/categories/it-security/</link>
    <description>Recent content in It Security on Pointers to the void</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 10 Oct 2019 00:18:06 +0200</lastBuildDate>
    
	<atom:link href="https://schlafwandler.github.io/categories/it-security/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>MRMCDCTF2019: Carbonara</title>
      <link>https://schlafwandler.github.io/posts/mrmcdctf2019-carbonara/</link>
      <pubDate>Thu, 10 Oct 2019 00:18:06 +0200</pubDate>
      
      <guid>https://schlafwandler.github.io/posts/mrmcdctf2019-carbonara/</guid>
      <description>Solution to Carbonara (medium - hard) from MRMCDCTF 2019 Carbonara is another one of my challenges for MRMCDCTF 2019. Just like KonradVC, it employs an anti-reversing trick, but of a completely different kind: the code is chopped into small pieces, each one instruction long. These pieces are saved in random order, and connected by jmps. The resulting code executes the instructions in the right order, but looks like a total mess.</description>
    </item>
    
    <item>
      <title>MRMCDCTF2019: KonradVC</title>
      <link>https://schlafwandler.github.io/posts/mrmcdctf2019-konradvc/</link>
      <pubDate>Mon, 30 Sep 2019 22:13:27 +0200</pubDate>
      
      <guid>https://schlafwandler.github.io/posts/mrmcdctf2019-konradvc/</guid>
      <description>Solution to KonradVC (medium - hard) from MRMCDCTF 2019 KonradVC is the second Windows challenge I wrote for the 2019 MRMCDCTF. Even though it&amp;rsquo;s a Windows challenge, it runs fine under Wine.
KonradVC was intended to be harder than Slicer, the other Windows challenge. It employs a very simple crypter to make analysis of the actual challenge code more difficult.
When loading it in Ghidra, the first thing we notice is that there seem to be only two functions: entry and FUN_00406039.</description>
    </item>
    
    <item>
      <title>MRMCDCTF2019: Misguided</title>
      <link>https://schlafwandler.github.io/posts/mrmcdctf2019-misguided/</link>
      <pubDate>Thu, 26 Sep 2019 23:38:04 +0200</pubDate>
      
      <guid>https://schlafwandler.github.io/posts/mrmcdctf2019-misguided/</guid>
      <description>Solution to Misguided (easy - medium) from MRMCDCTF 2019 Misguided is another Linux binary reversing challenge I had written for MRMCDCTF 2019. This one employs some simple obfuscation: Some entries in the symbol table are mixed up.
When opening the file in Ghidra (like we have done with Cereal or Slicer before), at first, everything seems normal.
This changes once we take at look at main, which decompiles to this:</description>
    </item>
    
    <item>
      <title>MRMCDCTF2019: Hopping machine</title>
      <link>https://schlafwandler.github.io/posts/mrmcdctf2019-hopping_machine/</link>
      <pubDate>Mon, 23 Sep 2019 15:54:23 +0200</pubDate>
      
      <guid>https://schlafwandler.github.io/posts/mrmcdctf2019-hopping_machine/</guid>
      <description>Solution to Hopping machine (medium) from MRMCDCTF 2019 Hopping machine is completely different from the other reversing challenges I wrote for this CTF. In some ways it&amp;rsquo;s an extension of an older challenge (Friendly Machine) I had written for MRMCDCTF 2017.
What makes it different? First, it&amp;rsquo;s written entirely in python. And second, the complete source code is provided with the challenge.
It therefore requires a different approach than the binary reversing challenges.</description>
    </item>
    
    <item>
      <title>MRMCDCTF2019: Slicer</title>
      <link>https://schlafwandler.github.io/posts/mrmcdctf2019-slicer/</link>
      <pubDate>Thu, 19 Sep 2019 17:01:00 +0200</pubDate>
      
      <guid>https://schlafwandler.github.io/posts/mrmcdctf2019-slicer/</guid>
      <description>Solution to Slicer (easy) from MRMCDCTF 2019 Slicer is one of the Windows challenges I have written for MRMCDCTF 2019. It&amp;rsquo;s another easy challenge, but this time the binary is an .exe (PE32) executable.
The challenge was also tested under wine (4.0), so if you want to try out some of the tricks for debugging wine applications, this would be a good opportunity.
But for this text, I will stick to Ghidra .</description>
    </item>
    
    <item>
      <title>MRMCDCTF2019: Cereal</title>
      <link>https://schlafwandler.github.io/posts/mrmcdctf2019-cereal/</link>
      <pubDate>Tue, 17 Sep 2019 18:55:24 +0200</pubDate>
      
      <guid>https://schlafwandler.github.io/posts/mrmcdctf2019-cereal/</guid>
      <description>Solution to Cereal (easy) from MRMCDCTF 2019 Cereal is another reversing challenge I have written for this years MRMCD CTF. But unlike Sitting duck, this reversing challenge actually involves reversing!
At first look the binary is similar to Sitting duck: It&amp;rsquo;s a 64 bit ELF executable, and it asks us for the password/flag when started. But simply trying strings will bring up nothing useful, so we have to actually analyse what the program does internally to find the flag.</description>
    </item>
    
    <item>
      <title>MRMCDCTF2019: Sitting duck</title>
      <link>https://schlafwandler.github.io/posts/mrmcdctf2019-sitting_duck/</link>
      <pubDate>Mon, 16 Sep 2019 17:27:35 +0200</pubDate>
      
      <guid>https://schlafwandler.github.io/posts/mrmcdctf2019-sitting_duck/</guid>
      <description>Solution to Sitting duck (very easy) from MRMCDCTF 2019 Sitting duck was by far the easiest challenge I have written for the MRMCD 2019 CTF. It was targeted mostly at total CTF newbies that had absolutely no previous experience with reversing challenges.
The challenge gives you a binary file and the hint that it is solvable with very little experience.
When executing the file, it asks us for the flag.</description>
    </item>
    
    <item>
      <title>Dumping /proc/kcore in 2019</title>
      <link>https://schlafwandler.github.io/posts/dumping-/proc/kcore/</link>
      <pubDate>Thu, 04 Jul 2019 23:27:20 +0200</pubDate>
      
      <guid>https://schlafwandler.github.io/posts/dumping-/proc/kcore/</guid>
      <description>In this post I will explain how to use /proc/kcore to read the physical memory (RAM) of a Linux system from userland. I&amp;rsquo;m also exploring how and why a previous tool for this task (getkcore from volatility) fails under newer (past 4.8) kernels. In parallel I present a simple demonstrational tool to dump the physical memory of a x86-64 system under more recent Linux version.
But first, lets have a look at two virtual files on a Linux system: /proc/kcore and /proc/iomem.</description>
    </item>
    
    <item>
      <title>Attacking applications running under WINE (Part III)</title>
      <link>https://schlafwandler.github.io/posts/attacking-wine-part-iii/</link>
      <pubDate>Mon, 27 May 2019 22:11:44 +0200</pubDate>
      
      <guid>https://schlafwandler.github.io/posts/attacking-wine-part-iii/</guid>
      <description>VIRTUAL_SetForceExec - WINE&amp;rsquo;s magic gadget In the last part of the series I demonstated a way to make the stack executable by returning to VirtualProtect. This is a nice and easy way to achieve arbitrary code execution - as long as you target a 32 bit programm. When targeting 64 bit programs there is a nasty obstacle to this trick: The x64 calling convention ships the first 4 parameters in the registers RCX, RDX, R8, and R9.</description>
    </item>
    
    <item>
      <title>Attacking applications running under WINE (Part II)</title>
      <link>https://schlafwandler.github.io/posts/attacking-wine-part-ii/</link>
      <pubDate>Mon, 20 May 2019 15:56:30 +0200</pubDate>
      
      <guid>https://schlafwandler.github.io/posts/attacking-wine-part-ii/</guid>
      <description>Simple exploits against targets under WINE In this part of the series, I will demonstrate some simple exploits against Windows executables running under WINE. I will assume basic knowledge on exploiting stack overflows on the x86 architecture. Additionally, some knowledge of return-oriented-programming (ROP) or return-to-libc exploitation techniques is beneficial. Out of convenience I&amp;rsquo;m using pwntools for the development of the exploits, but every other toolkit will work as well. Also, I&amp;rsquo;m showing some rather simple task in some detail to demonstrate the use of Linux tools against windows binaries.</description>
    </item>
    
    <item>
      <title>Attacking applications running under WINE (Part I)</title>
      <link>https://schlafwandler.github.io/posts/attacking-wine-part-i/</link>
      <pubDate>Thu, 09 May 2019 00:00:21 +0200</pubDate>
      
      <guid>https://schlafwandler.github.io/posts/attacking-wine-part-i/</guid>
      <description>Examining the WINE environment Intro This text is the first of a series that details the exploitation of Windows software running under WINE. My focus is on CTF-like settings, but most information should apply in other situations as well.
In this text i concentrate on general properties of processes running in a WINE environment, especially on the aspects that are relevant for exploit development. I will take a deeper look into actual exploitation and some WINE specific tricks in the later parts.</description>
    </item>
    
  </channel>
</rss>