<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>It Security on Pointers to the void</title>
    <link>https://schlafwandler.github.io/categories/it-security/</link>
    <description>Recent content in It Security on Pointers to the void</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 17 Sep 2019 18:55:24 +0200</lastBuildDate>
    
	<atom:link href="https://schlafwandler.github.io/categories/it-security/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>MRMCDCTF2019: Cereal</title>
      <link>https://schlafwandler.github.io/posts/mrmcdctf2019-cereal/</link>
      <pubDate>Tue, 17 Sep 2019 18:55:24 +0200</pubDate>
      
      <guid>https://schlafwandler.github.io/posts/mrmcdctf2019-cereal/</guid>
      <description>Solution to Cereal (easy) from MRMCDCTF 2019 Cereal is an other reversing challenge I have written for this years MRMCD CTF. But unlike Sitting duck, this challenge actually involves reversing!
At first look the binary is similar to Sitting duck: It&amp;rsquo;s a 64 bit ELF executable, and it asks us for the password/flag when started. But simply trying strings will bring up nothing useful, so we have to actually analyse what the program does internally to find the flag.</description>
    </item>
    
    <item>
      <title>MRMCDCTF2019: Sitting duck</title>
      <link>https://schlafwandler.github.io/posts/mrmcdctf2019-sitting_duck/</link>
      <pubDate>Mon, 16 Sep 2019 17:27:35 +0200</pubDate>
      
      <guid>https://schlafwandler.github.io/posts/mrmcdctf2019-sitting_duck/</guid>
      <description>Solution to Sitting duck (very easy) from MRMCDCTF 2019 Sitting duck was by far the easiest challenge I have written for the MRMCD 2019 CTF. It was targeted mostly at total CTF newbies that had absolutely no previous experience with reversing challenges.
The challenge gives you a binary file and the hint that it is solvable with very little experience.
When executing the file, it asks us for the flag.</description>
    </item>
    
    <item>
      <title>Dumping /proc/kcore in 2019</title>
      <link>https://schlafwandler.github.io/posts/dumping-/proc/kcore/</link>
      <pubDate>Thu, 04 Jul 2019 23:27:20 +0200</pubDate>
      
      <guid>https://schlafwandler.github.io/posts/dumping-/proc/kcore/</guid>
      <description>In this post I will explain how to use /proc/kcore to read the physical memory (RAM) of a Linux system from userland. I&amp;rsquo;m also exploring how and why a previous tool for this task (getkcore from volatility) fails under newer (past 4.8) kernels. In parallel I present a simple demonstrational tool to dump the physical memory of a x86-64 system under more recent Linux version.
But first, lets have a look at two virtual files on a Linux system: /proc/kcore and /proc/iomem.</description>
    </item>
    
    <item>
      <title>Attacking applications running under WINE (Part III)</title>
      <link>https://schlafwandler.github.io/posts/attacking-wine-part-iii/</link>
      <pubDate>Mon, 27 May 2019 22:11:44 +0200</pubDate>
      
      <guid>https://schlafwandler.github.io/posts/attacking-wine-part-iii/</guid>
      <description>VIRTUAL_SetForceExec - WINE&amp;rsquo;s magic gadget In the last part of the series I demonstated a way to make the stack executable by returning to VirtualProtect. This is a nice and easy way to achieve arbitrary code execution - as long as you target a 32 bit programm. When targeting 64 bit programs there is a nasty obstacle to this trick: The x64 calling convention ships the first 4 parameters in the registers RCX, RDX, R8, and R9.</description>
    </item>
    
    <item>
      <title>Attacking applications running under WINE (Part II)</title>
      <link>https://schlafwandler.github.io/posts/attacking-wine-part-ii/</link>
      <pubDate>Mon, 20 May 2019 15:56:30 +0200</pubDate>
      
      <guid>https://schlafwandler.github.io/posts/attacking-wine-part-ii/</guid>
      <description>Simple exploits against targets under WINE In this part of the series, I will demonstrate some simple exploits against Windows executables running under WINE. I will assume basic knowledge on exploiting stack overflows on the x86 architecture. Additionally, some knowledge of return-oriented-programming (ROP) or return-to-libc exploitation techniques is beneficial. Out of convenience I&amp;rsquo;m using pwntools for the development of the exploits, but every other toolkit will work as well. Also, I&amp;rsquo;m showing some rather simple task in some detail to demonstrate the use of Linux tools against windows binaries.</description>
    </item>
    
    <item>
      <title>Attacking applications running under WINE (Part I)</title>
      <link>https://schlafwandler.github.io/posts/attacking-wine-part-i/</link>
      <pubDate>Thu, 09 May 2019 00:00:21 +0200</pubDate>
      
      <guid>https://schlafwandler.github.io/posts/attacking-wine-part-i/</guid>
      <description>Examining the WINE environment Intro This text is the first of a series that details the exploitation of Windows software running under WINE. My focus is on CTF-like settings, but most information should apply in other situations as well.
In this text i concentrate on general properties of processes running in a WINE environment, especially on the aspects that are relevant for exploit development. I will take a deeper look into actual exploitation and some WINE specific tricks in the later parts.</description>
    </item>
    
  </channel>
</rss>