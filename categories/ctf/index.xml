<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Ctf on Pointers to the void</title>
    <link>https://schlafwandler.github.io/categories/ctf/</link>
    <description>Recent content in Ctf on Pointers to the void</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 19 Sep 2019 17:01:00 +0200</lastBuildDate>
    
	<atom:link href="https://schlafwandler.github.io/categories/ctf/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>MRMCDCTF2019: Slicer</title>
      <link>https://schlafwandler.github.io/posts/mrmcdctf2019-slicer/</link>
      <pubDate>Thu, 19 Sep 2019 17:01:00 +0200</pubDate>
      
      <guid>https://schlafwandler.github.io/posts/mrmcdctf2019-slicer/</guid>
      <description>Solution to Slicer (easy) from MRMCDCTF 2019 Slicer is one of the Windows challenges I have written for MRMCDCTF 2019. It&amp;rsquo;s an other easy challenge, but this time the binary is an .exe (PE32) executable.
The challenge was also tested under wine (4.0), so if you want to try out some of the tricks for debugging wine applications, this would be a good opportunity.
But for this text, I will stick to Ghidra .</description>
    </item>
    
    <item>
      <title>MRMCDCTF2019: Cereal</title>
      <link>https://schlafwandler.github.io/posts/mrmcdctf2019-cereal/</link>
      <pubDate>Tue, 17 Sep 2019 18:55:24 +0200</pubDate>
      
      <guid>https://schlafwandler.github.io/posts/mrmcdctf2019-cereal/</guid>
      <description>Solution to Cereal (easy) from MRMCDCTF 2019 Cereal is an other reversing challenge I have written for this years MRMCD CTF. But unlike Sitting duck, this reversing challenge actually involves reversing!
At first look the binary is similar to Sitting duck: It&amp;rsquo;s a 64 bit ELF executable, and it asks us for the password/flag when started. But simply trying strings will bring up nothing useful, so we have to actually analyse what the program does internally to find the flag.</description>
    </item>
    
    <item>
      <title>MRMCDCTF2019: Sitting duck</title>
      <link>https://schlafwandler.github.io/posts/mrmcdctf2019-sitting_duck/</link>
      <pubDate>Mon, 16 Sep 2019 17:27:35 +0200</pubDate>
      
      <guid>https://schlafwandler.github.io/posts/mrmcdctf2019-sitting_duck/</guid>
      <description>Solution to Sitting duck (very easy) from MRMCDCTF 2019 Sitting duck was by far the easiest challenge I have written for the MRMCD 2019 CTF. It was targeted mostly at total CTF newbies that had absolutely no previous experience with reversing challenges.
The challenge gives you a binary file and the hint that it is solvable with very little experience.
When executing the file, it asks us for the flag.</description>
    </item>
    
  </channel>
</rss>