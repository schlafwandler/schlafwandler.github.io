<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>/Proc/Kcore on Pointers to the void</title>
    <link>https://schlafwandler.github.io/tags/proc-kcore/</link>
    <description>Recent content in /Proc/Kcore on Pointers to the void</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 04 Jul 2019 23:27:20 +0200</lastBuildDate>
    
	<atom:link href="https://schlafwandler.github.io/tags/proc-kcore/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Dumping /proc/kcore in 2019</title>
      <link>https://schlafwandler.github.io/posts/dumping-/proc/kcore/</link>
      <pubDate>Thu, 04 Jul 2019 23:27:20 +0200</pubDate>
      
      <guid>https://schlafwandler.github.io/posts/dumping-/proc/kcore/</guid>
      <description>In this post I will explain how to use /proc/kcore to read the physical memory (RAM) of a Linux system from userland. I&amp;rsquo;m also exploring how and why a previous tool for this task (getkcore from volatility) fails under newer (past 4.8) kernels. In parallel I present a simple demonstrational tool to dump the physical memory of a x86-64 system under more recent Linux version.
But first, lets have a look at two virtual files on a Linux system: /proc/kcore and /proc/iomem.</description>
    </item>
    
  </channel>
</rss>